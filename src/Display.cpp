#include "Display.h"

const unsigned char mastarcardBitmap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x01, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x07, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x07, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x07, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x07, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x03, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x03, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x03, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x03, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x03, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x03, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x07, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x07, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x07, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x07, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x01, 0x80, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

Display::Display(bool ledPresent,bool lcdPresent, bool speakerPresent)
{
  this->ledPresent = ledPresent;
  this->lcdPresent = lcdPresent;
  this->speakerPresent = speakerPresent;

  if(ledPresent)
    led = new Led();
  if(lcdPresent)
     lcd = new Lcd();
  if(speakerPresent)
    speaker = new Speaker();
  
    
  
}

void Display::alertUser(const char * textMessage, LedPattern ledPattern, AudioPattern audioPattern)
{
  lcd->printText(textMessage);
  led->showLed(255,0,0);
  if(audioPattern == MA_SONIC)
    speaker->playFromFile("/mastercard_sonic.mp3");
}


void Display::initDisplay()
{
  if(lcdPresent)
    lcd->initLcd();
  if(ledPresent)
    led->initLed();
   if(speakerPresent)
    speaker->initSpeaker();   
}

void Display::loop()
{
  if(speakerPresent)
    speaker->speakerLoop();
}

Lcd::Lcd()
{
   
  Wire.begin(LCD_SDA,LCD_SCL);
  oledDisplay =  new Adafruit_SSD1306(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
}


void Lcd::initLcd()
{

  oledDisplay->begin(SSD1306_SWITCHCAPVCC, SCREEN_I2C_ADDRESS);  // initialize with the I2C addr 0x3D (for the 128x64)

  oledDisplay->display();
  delay(2000); // Pause for 2 seconds

  
  
  oledDisplay->clearDisplay(); // Make sure the display is cleared
  // Draw the bitmap:
  // drawBitmap(x position, y position, bitmap data, bitmap width, bitmap height, color)
  oledDisplay->drawBitmap(0, 0, mastarcardBitmap, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);

  // Update the display
  oledDisplay->display();
}

void Lcd::printText(const char* str){

  oledDisplay->clearDisplay();
  oledDisplay->setTextSize(1); // Draw 2X-scale text //TODO -Get from config
  oledDisplay->setTextColor(SSD1306_WHITE);
  oledDisplay->setCursor(10, 0);
  oledDisplay->println(F(str));
  oledDisplay->display();      // Show initial text
  //delay(100);

}

  

Speaker::Speaker(){

  tts = new TTS(); 
  audioLogger = &Serial; 
  out = new AudioOutputI2S(0,1);
  // SPIFFS.begin();
  mp3 = nullptr;
  tonePlaying = false;
}

void Speaker::initSpeaker()
{
   SPIFFS.begin();
}



void Speaker::playTTS(const char * str)
{
  String urlStr = tts->getSpeechUrl(str);
  lastms = 0;
  file = new AudioFileSourceICYStream(urlStr.c_str());
  tonePlaying = false;
  playMp3(file);
  
}

void Speaker::playFromFile(const char * str)
{
  file = new AudioFileSourceSPIFFS(str);
  lastms = 0;
  playMp3(file);
}

void Speaker::playMp3(AudioFileSource * file){

// file->RegisterMetadataCB( (AudioStatus::metadataCBFn)std::bind(&Speaker::MDCallback,std::placeholders::_1,std::placeholders::_2,std::placeholders::_3,std::placeholders::_4), (void*)"ICY");
  buff = new AudioFileSourceBuffer(file, 10240);
  // buff->RegisterStatusCB(std::bind(&Speaker::StatusCallback,this,std::placeholders::_1), (void*)"buffer");
  
  mp3 = new AudioGeneratorMP3();
  // mp3->RegisterStatusCB(StatusCallback, (void*)"mp3");
  
  mp3->begin(buff, out);

}

void Speaker::speakerLoop()
{
if (nullptr != mp3 && mp3->isRunning()) {
    if (millis()-lastms > 1000) {
      lastms = millis();
      Serial.printf("Running for %d ms...\n", lastms);
      Serial.flush();
     }
    if (!mp3->loop()) stopPlay();
  }
  else if(tonePlaying) 
  {
    if (millis()-lastms > toneDuration)
    {
      stopPlay();
    }
    else
    {
      lastms = millis();
    }
  }
}

void Speaker::stopPlay()
{
  mp3->stop();
  delete mp3;
  mp3 = nullptr;
  delete buff;
  buff = nullptr;
  delete file;
  file = nullptr;
  lastms = 0;

  if(tonePlaying)
  {
      tonePlaying = false;
      toneDuration = 0;
  }
}
void Speaker::playTone(uint16_t frequency, uint16_t duration,uint8_t repeatCount){
  if (ledcRead(TONE_CHANNEL)) {
        //log_e("Tone channel %d is already in use", ledcRead(channel)); //TODO - Proper error handling
        return;
    }
    ledcAttachPin(SPEAKER_PIN, TONE_CHANNEL);
    ledcWriteTone(TONE_CHANNEL, frequency);
    lastms = 0;
    tonePlaying = true;
     toneDuration= duration;
      

}



Led::Led()
{
  pixels = new Adafruit_NeoPixel(NUMPIXELS, STATUS_LED_PIN, NEO_GRB + NEO_KHZ800);
}

void Led::initLed()
{

pixels->begin(); // This initializes the NeoPixel library.
   
}


void Led::showLed(byte red, byte green, byte blue )
{
  //pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
  pixels->setPixelColor(0, pixels->Color(red,green,blue)); // Moderately bright green color.
  pixels->show(); // This sends the updated pixel color to the hardware.
}


// Called when a metadata event occurs (i.e. an ID3 tag, an ICY block, etc.
// void Speaker::MDCallback(void *cbData, const char *type, bool isUnicode, const char *string)
// {
//   const char *ptr = reinterpret_cast<const char *>(cbData);
//   (void) isUnicode; // Punt this ball for now
//   // Note that the type and string may be in PROGMEM, so copy them to RAM for printf
//   char s1[32], s2[64];
//   strncpy_P(s1, type, sizeof(s1));
//   s1[sizeof(s1)-1]=0;
//   strncpy_P(s2, string, sizeof(s2));
//   s2[sizeof(s2)-1]=0;
//   Serial.printf("METADATA(%s) '%s' = '%s'\n", ptr, s1, s2);
//   Serial.flush();
// }

// Called when there's a warning or error (like a buffer underflow or decode hiccup)
// void Speaker::StatusCallback(void *cbData, int code, const char *string)
// {
//   const char *ptr = reinterpret_cast<const char *>(cbData);
//   // Note that the string may be in PROGMEM, so copy it to RAM for printf
//   char s1[64];
//   strncpy_P(s1, string, sizeof(s1));
//   s1[sizeof(s1)-1]=0;
//   Serial.printf("STATUS(%s) '%d' = '%s'\n", ptr, code, s1);
//   Serial.flush();

// }